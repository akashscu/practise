genData(5,5,2)
closestCenters(list$all_points,list$centers)
ak<-genData(5,5,2)
closestCenters(ak$all_points,ak$centers)
genData <- function(N,D,K){
pt<-(N*D)
points<-sample.int(pt,replace = TRUE)
all_points<-matrix(points, nrow = D, ncol = N)
m<-sample(c(1:N),K,replace = FALSE)
centers=subset(all_points,select=c(m))
return (list(all_points=all_points,centers=centers))
}
closestCenters<-function(all_points,centers){
N=ncol(all_points)
D=nrow(all_points)
K=ncol(centers)
label=matrix(,nrow=1,ncol=N)
new_centers=matrix(,nrow=D,ncol=K)
for(i in 1:N)
{
distances = c()
distances <- colSums((all_points[,i]-centers)^2)
label[1,i]=which.min(distances)
}
for(i in 1:K)
{
v=c(which(label==i))
if(length(v==1)) v=rep(v,2)
new_centers[,i]<-rowMeans(all_points[,v])
}
return(list(new_centers=new_centers,label=label))
}
myKmeans<-function(all_points,centers,niter){
loop<-1
for(i in 1:niter){
result2<-closestCenters(all_points,centers)
centers<-result2$new_centers
label<-result2$label
}
return(list(new_centers=centers,label=label))
}
list=genData(100,4,5)
myKmeans(list$all_points,list$centers,10)
result<-genData(5,5,2)
closestCenters(result$all_points,result$centers)
myKmeans(result$all_points,result$centers,10)
genData(5,5,2)
myKmeans(all_points,centers,10)
myKmeans(list$all_points,list$centers,10)
censusSummary <- function(data) {
dataFile <- read.csv(data, head = TRUE, sep = ",")
df<-data.frame(dataFile)
print(mean(df$X73))
table(df[[13]])
}
dbSummary <- function(data) {
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dataFile <- read.csv(data, head=TRUE, sep = ",")
df<-data.frame(dataFile)
G<-filter(df,X73>20 & X73<50)
print(mean(G$X0.8))
b<-arrange(G,X73)
plot(b[[1]],ylab="Age")
}
kmeans(ak$all_points,ak$centers,10,algorithm = "Lloyd")
kmeans(ak$all_points,ak$centers,10,algorithm = "Lloyd")
kmeans(t(list$all_points),t(list$centers),10)
li=genData(5,5,2)
myKmeans(li$all_points,li$centers,10)
(t(list$all_points),t(list$centers),10)
kmeans(t(list$all_points),t(list$centers),10)
getAdjMatrix<-function(fname) {
library(igraph)
xlist<-read.graph(fname)
xadj<-get.adjacency(xlist, sparse = TRUE)
print(vcount(xlist))
print(ecount(xlist))
return (xadj)
}
getTransitionMatrix<-function(A){
library(Matrix)
A<-t(A)
summA<-summary(A)
O<-colSums(A)
summA$x<-summA$x/O[summA$j]
T<-sparseMatrix(i=summA$i, j=summA$j, x=summA$x,dims=c(A@Dim[1],A@Dim[2]))
z<-colSums(A)
z[z==0]<-1/ncol(A)
z[z>0]<-0.15/ncol(A)
return(list(T=T,z=z))
}
myPageRank<-function(T,z,niter){
xold<-matrix(1/nrow(T),nrow=nrow(T),ncol=1)
e<-matrix(1,nrow=nrow(T),ncol=1)
for(i in 1: niter){
xnew = (0.85*T) %*% xold + e %*% (z %*% xold)
xold=xnew
}
return (xnew)
}
getAdjMatrix<-function(fname) {
library(igraph)
xlist<-read.graph(fname)
xadj<-get.adjacency(xlist, sparse = TRUE)
print(vcount(xlist))
print(ecount(xlist))
return (xadj)
}
getTransitionMatrix<-function(A){
library(Matrix)
A<-t(A)
summA<-summary(A)
O<-colSums(A)
summA$x<-summA$x/O[summA$j]
T<-sparseMatrix(i=summA$i, j=summA$j, x=summA$x,dims=c(A@Dim[1],A@Dim[2]))
z<-colSums(A)
z[z==0]<-1/ncol(A)
z[z>0]<-0.15/ncol(A)
return(list(T=T,z=z))
}
myPageRank<-function(T,z,niter){
xold<-matrix(1/nrow(T),nrow=nrow(T),ncol=1)
e<-matrix(1,nrow=nrow(T),ncol=1)
for(i in 1: niter){
xnew = (0.85*T) %*% xold + e %*% (z %*% xold)
xold=xnew
}
return (xnew)
}
fname<-"temp.txt"
A<-getAdjMatrix(fname)
trans<-getTransitionMatrix(A)
Rank<-myPageRank(trans$T,trans$z,100)
install.packages("install.packages(“igraph")")
"igraph"
install.packages(“igraph")
install.packages("igraph")
getAdjMatrix<-function(fname) {
library(igraph)
xgraph<-read.graph(fname)
xadjacent<-get.adjacency(xlist, sparse = TRUE)
print(vcount(xgraph))
print(ecount(xgraph))
return (xadjacent)
}
getTransitionMatrix<-function(A){
library(Matrix)
A<-t(A)
summA<-summary(A)
O<-colSums(A)
summA$G<-summA$G/O[summA$j]
T<-sparseMatrix(i=summA$i, j=summA$j, x=summA$G,dims=c(A@Dim[1],A@Dim[2]))
z<-colSums(A)
z[z==0]<-1/ncol(A)
z[z>0]<-0.15/ncol(A)
return(list(T=T,z=z))
}
myPageRank<-function(T,z,niter){
xold<-matrix(1/nrow(T),nrow=nrow(T),ncol=1)
e<-matrix(1,nrow=nrow(T),ncol=1)
for(i in 1: niter){
xnew = (0.85*T) %*% xold + e %*% (z %*% xold)
xold=xnew
}
return (xnew)
}
fname<-"temp.txt"
A<-getAdjMatrix(fname)
?rnorm
args("rnorm")
head(x)
head(x)
a<- available.packages()
head(rownames(a),3)
a
install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
getwd()
dir()
setwd("~/Documents/R Language Folder/Coursera")
getwd()
getwd()
dir()
print(x)
x <- 1
print(x)
print(x)
print(x) ## printing is explicity, specifying r engine to print it
x ## print is done automaticaly by r - engine
print(x) ## printing is explicity, specifying r engine to print it
x ## print is done automaticaly by r - engine
msg <- "Hello" ## this is string vector can accomadate only string vector
print(msg)
seq <- 1:20
print(seq)
seq[10]
install.packages(c("boot", "class", "cluster", "codetools", "dplyr", "foreign", "igraph", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "R6", "Rcpp", "rpart", "spatial", "survival"))
print(x)
print(x)
print(x)
x<-c(1,2)
x
print(x)
print(x)
print(x)
print(x)
y<-(TRUE,FALSE)
print(y)
print(x)
y<-c(TRUE,FALSE)
print(y)
print(x)
y<-c(TRUE,FALSE)
print(y)
z<-c(T,F)
print(z)
print(x)
y<-c(TRUE,FALSE)
print(y)
z<-c(T,F)
print(z)
s <-c("a","b","c")
print(s)
print(x)
y<-c(TRUE,FALSE)
print(y)
z<-c(T,F)
print(z)
s <-c("a","b","c")
print(s)
co <- c(1 + i5, 2+ 3i)
print(co)
print(x)
y<-c(TRUE,FALSE)
print(y)
z<-c(T,F)
print(z)
s <-c("a","b","c")
print(s)
co <- c(1 + 5i, 2+ 3i)
print(co)
x<-1:6
class(x)
as.integer(x)
as.logical(x)
as.character(x)
print(x)
# this is the example of logical
y<-c(TRUE,FALSE)
print(y)
# this is example of logical in short hand notation
z<-c(T,F)
print(z)
# this is the example of character
s <-c("a","b","c")
print(s)
# this is the example of complex number
co <- c(1 + 5i, 2+ 3i)
print(co)
#there is implicit coercion
# x <- c('a',1)
# there is explicit coersion
# this is generally done by use of function starting with "as." eg: as.numeric(x),as.logical(x),as.character(x)
"print(x)
[1] 1 2
>
> y<-c(TRUE,FALSE)
> print(y)
[1]  TRUE FALSE
>
> z<-c(T,F)
> print(z)
[1]  TRUE FALSE
>
> s <-c("a","b","c")
> print(s)
[1] "a" "b" "c"
>
> co <- c(1 + 5i, 2+ 3i)
> print(co)
[1] 1+5i 2+3i
>
>
> x<-1:6
>
> class(x)
[1] "integer"
> as.integer(x)
[1] 1 2 3 4 5 6
> as.logical(x)
[1] TRUE TRUE TRUE TRUE TRUE TRUE
> as.character(x)
[1] "1" "2" "3" "4" "5" "6"
"
# to check the object type of the "class(x)"
# TO CREATE LIST
ls <- list(1, "a",TRUE,5 + 6i)
ls <- list(1, "a",TRUE,5 + 6i)
LS
ls
class(li)
class(ls)
# how to write matrix
m <- matrix(nrow = 2, ncol = 3)
m
dim
dim(m)
attributes(m)
x<- 1:10
x
dim(x) <- c(2,5)
x
x<-1:3
y<-10:12
mc<-cbind(x,y)
mc
mr<-rbind(x,y)
mr
fac <- factor(c("yes","no","yes","no","no"), levels = c("yes","no"))
fac
table(fac)
unclass(fac)
# however it need not to be of the same length
x<-data.frame(foo = 1:4, bar = c(T,F,F,T))
x
# however it need not to be of the same type
# first row is the annotation purpose
#can be created using read.table() or  read.csv()
#  x<-data.frame(foo = 1:4, bar = c(T,F,F,T))
" foo   bar
1   1  TRUE
2   2 FALSE
3   3 FALSE
4   4  TRUE
"
nrow(x)
ncol(x)
x <- 1:3
names(x)
x <- 1:3
names(x)
# this gives null result
names(x) <- c("foo","bar","noise")
names(x)
x
ls <- list(a = 1,b=TRUE,c="HEY",d=5 + 5i)
ls
m2 <- matrix(1:6, nrow=2, ncol = 3)
m2
m <- matrix(nrow = 2, ncol = 3)
m
m<-matrix(1:4,row=2,col=2)
dimnames(m) = list(c('a','b'),c('c','d'))
m<-matrix(1:4,nrow=2,ncol=2)
dimnames(m) = list(c('a','b'),c('c','d'))
m
?read.table()
str(file)
con<-url("http://www.yahoo.com",'r')
con<-url("https://www..com",'r')
con<-url("https://www.yelp.com",'r')
con<-url("http://www.yelp.com",'r')
data<- readLines(con,nrow=100)
data<- readLines(con,100)
data
x
M<-matrix(1:6, 2,3)
m
M
m[1,]
m<-matrix(1:6, 2,3)
m[1,]
m[1,2]
m[1,2,drop = FALSE]
m[1,,drop = FALSE]
x<-list(foo = 1:4, bar = 0.6)
x
x[[1]]
x[1]
x$bar
x<-list(foo = 1:4, bar = 0.6,baz = "hello")
x
x[1,3]
x[c(1,3)]
x[[c(1,3)]]
x$f
x$b
x<-list(c(1,2,NA,4,NA))
bad<- is.na(x)
bad
x<-list(1,2,NA,4,NA)
bad <- is.na(x)
y <- list(c(1,2),c(3,4),c(5,6))
list
y
z <- list(list("foo", 1, TRUE), list("bar",2,FALSE))
z
z[1]
z[1][1]
x[1]
x[1][1][1]
z[[1]]
z[1]
x[[1]][[3]]
x[[1]][[2]]
z[[1]][[2]]
x[!bad]
x
x1 <- c(9,8, NA,NA,7,NA)
good<- complete.cases(x,x1)
x<-list(1,2,3,NA,4,NA)
good<- complete.cases(x,x1)
len(x)
x.len()
length(x)
length(x1)
x1 <- c(9,8,NA,NA,7,NA)
good<- complete.cases(x,x1)
x1<-c(9,8,7,NA,6,NA)
good<- complete.cases(x,x1)
x<-c(1,2,NA,4,NA,5)
y<-c("a","b",NA,"c",NA,"d")
gd <- complete.cases(x,y)
gd
gd <- complete.cases(x,x1)
gd
x[gd]
m1<-matrix(1:4,2,2)
m2<-martix(rep(10,4),2,2)
m2<-matrix(rep(10,4),2,2)
m1*m2
m1%%m2
m1 %% m2
m1 % % m2
m1 %% m2
m1 %*% m2
x<-1:4
y<-2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>4]
x[(x>4)]
x[(x>4) = 4]
x[(x>10)]
x[(x>10)]<-4
x[(x>10)]<-4
x
data <- read.csv("hw1_data.csv")
head(data)
data <- read.csv("hw1_data.csv",nrow = 2)
data
data <- read.csv("hw1_data.csv")
length(data)
tail(data)
tail(data,nrow = 2)
data$Ozone[47]
bad <- is.na(data$Ozone)
bad
ba<-bad[bad==TRUE]
length(ba)
length(bad[is.na(bad)])
length(bad[is.na(bad)==TRUE])
length(ba)
# do this again
length(data$Ozone[is.na(data$Ozone)])
mean(data$Ozone[!is.na(data$Ozone)])
datapart<-data[data$Ozone>31 && data$Temp>90]
datapart
datapart<-data[data$Ozone>31 & data$Temp>90]
datapart<-data$Solar.R[data$Ozone>31 & data$Temp>90]
datapart
mean(datapart)
mean(datapart[!is.na(datapart)])
head(data)
mean(data$Temp[data$Month=6])
mean(data$Temp[data$Month==6])
max
max(data$Ozone[data$Month==5])
d1 <- data$Ozone[is.na(data$Ozone)]
d1
d1 <- data$Ozone[(!is.na(data$Ozone)) && data$Ozone[Month==5]]
d1 <- data$Ozone[(!is.na(data$Ozone)) && data$Ozone[data$Month==5]]
d1
d1 <- data$Ozone[!is.na(data$Ozone) && data$Ozone[data$Month==5]]
d1
d1<- data[data$Month == 5]
head(data)
data[data$Month=5]
data[data$Month==5]
d1<- data[data[data$Month=5]]
d1<- data[data[data$Month==5]]
d1<- data$Month
1
d1
d1<- data$month<6
d1
d1<- data$Month<6
d1
d1<- data$Month==5
d1
d1<- data$Ozone[data$Month==5]
d1
d2<-is.na(d1)
d2
d2<-d1[!is.na(d1)]
d2
max[d2]
max(d2)
